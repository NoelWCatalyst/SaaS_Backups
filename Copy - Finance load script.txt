///$tab Main
SET ThousandSep=',';
SET DecimalSep='.';
SET MoneyThousandSep=','; 
SET MoneyDecimalSep='.';
SET MoneyFormat='£#,##0.00;-£#,##0.00';
SET TimeFormat='hh:mm:ss';
SET DateFormat='DD/MM/YYYY';
SET TimestampFormat='DD/MM/YYYY hh:mm'; //ML - updated to deviate from standard and match Netsuite output
SET FirstWeekDay=0;
SET BrokenWeeks=0;
SET ReferenceDay=4;
SET FirstMonthOfYear=0;
SET CollationLocale='en-GB';
SET CreateSearchIndexOnReload=0;
SET MonthNames='Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec';
SET LongMonthNames='January;February;March;April;May;June;July;August;September;October;November;December';
SET DayNames='Mon;Tue;Wed;Thu;Fri;Sat;Sun';
SET LongDayNames='Monday;Tuesday;Wednesday;Thursday;Friday;Saturday;Sunday';
//set Verbatim = 1;
//=========================================================
//Set the default date formats for the calendar build 
LET vFiscalStartMonth = 4;		// What month is the fiscal start month
  
//=========================================================
//Identifies if the environment is DEV/TEST/LIVE with no '\'
//this should be set to D/T/L
LET vEnvironemt = 'D';

// APP's location e.g. 'E:\QlikSenseData\Apps\BlankApp' no trailing '\'
LET vBaseLib = 'E:\QlikSenseData';

//=========================================================
// Standard Variables
// 1 = ON
// 0 = OFF
LET vDo_LoadProcessedData			= 	1;	// RS When an app is purely used for executing ETL process we don't want to retain data in memory
LET vDo_LinkTable	 				= 	1;  // 0=OFF, 1=LINK, 2=CONCATENATED FACT (Script to be updated)
LET vDo_Calendar 					= 	1;	// Create a common calendar - needs FK_CALENDAR / PK_CALENDAR
LET vDo_DuplicateKey	 			= 	0;	// Check for Duplicate Key Fields (PKs)
LET vDo_DervidedCalanderTypes 		=	1;	// Create Month, Year, MonthYEar etc. based on the field list in 'vDateFieldList' 


//=========================================================
// Output Tables for ETL stages
// 	4 = Create: Extract, Transform, Add Keys, Load QVDs
// 	3 = Create:          Transform, Add Keys, Load QVDs
//	2 = Create:                               Load QVDs
//  1 = Load Existing QVDs


LET vETL_LINK_TABLE						=   0;//4;
LET vETL_NETSUITE_GL					=   2;
LET vETL_PL_HEADERS						=   4;
LET vETL_FINANCIAL_BUDGET				=	4;


// Global Var's
LET vDateFieldList						= 	'';





///$tab VERSION
/*
v1.1	GWM	first version running from updated extract
v1.2	GWM	first version running from incremental load script;
v1.4	GWm updated with new budget/budget format from Ash
v1.6	GWM updated with 4th Narch chart of accounts from Ash
*/
///$tab Subs
/* 

Catalyst IT Standard Scripts and sub's
www.catalyst-it.co.uk
updates:
11 Oct 2018 by Lee Connor
16 Sep 2019 by Gordon McAlpine 
	- removed create folder execute commands
    - moved FiscalQuaterMap from Main to Subs section
    - corrected spelling in comments
            
*/

//=============================================================
// Tag field names to be a date field 
//=============================================================
sub AddFieldToDateList (vFieldName)

	if len(vDateFieldList) > 0 THEN
    	LET vDateFieldList = vDateFieldList & ', ';
	end if
	
	LET vDateFieldList = vDateFieldList & vFieldName;

end sub

//=========================================================
// Setup all defaults
//=========================================================

    
// Set the base location
    if vEnvironemt = 'D' then 
        SET vBaseLib = $(vBaseLib)\Dev;
	end if

    if vEnvironemt = 'T' then 
        SET vBaseLib = $(vBaseLib)\Test;
    end if

    if vEnvironemt = 'L' then 
        SET vBaseLib = $(vBaseLib)\Live;
    end if

    SET vBaseLib_Extract	= $(vBaseLib)\Extract;
    SET vBaseLib_Transform	= $(vBaseLib)\Transform;
    SET vBaseLib_Load		= $(vBaseLib)\Load;
        


//=======================================================================================
// FTP / directory load and move from source to destination (from incoming to processed)
//=======================================================================================
sub CopyAndLoad(FileName, Root, Ext, FileDestination, QVDName, QVDDestination, ConcatYN, UpdateFieldName, PKField, FieldNames)

		
	if len(FieldNames) = 0 then
    	SET FieldNames = '*';
    end if
    
    FOR EACH File IN FILELIST('$(Root)\$(FileName).$(Ext)')  ///!!!!! may need the ; adding back on end
    
        // Test if file already exsists, if not create it, if the field does not need a concat with the file just load it
        if IsNull(FileTime('$(QVDDestination)\$(QVDName).qvd')) or ConcatYN = 'N' then 
        
        	//Do we have a update and primary field to compare against
             if len(UpdateFieldName) > 0 and len(PKField) > 0  then 
                    [NextFile] : 
                    LOAD *, '$(File)' as ImportFileName, Now() as ImportDate, Timestamp(Timestamp#([$(UpdateFieldName)], '$(TimestampFormat)'))  as LastUpdate
                    FROM 
                        $(File) 
                        (txt, utf8, embedded labels, delimiter is ',', msq);
             else
					[NextFile] : 
                    LOAD *, '$(File)' as ImportFileName, Now() as ImportDate
                    FROM 
                        $(File) 
                        (txt, utf8, embedded labels, delimiter is ',', msq);
             end if
        else
        	 // Concat with the file data in the QVD (but oly old records where the PKField is not also in the new file - i.e. ones that haven't been updated)
             if len(UpdateFieldName) > 0 and len(PKField) > 0  then 
                  [NextFile]:
                    LOAD *, '$(File)' as ImportFileName, Now() as ImportDate, Timestamp(Timestamp#([$(UpdateFieldName)], '$(TimestampFormat)'))  as LastUpdate
                    FROM $(File) 
                    (txt, utf8, embedded labels, delimiter is ',', msq);
                   Concatenate
                   Load * from $(QVDDestination)\$(QVDName).qvd (qvd)
                   where not exists([$(PKField)]);

                  // now remove the duplicates if they have not been updated
                  
                  Trace [$(PKField)];
                  filter:  
                  INNER KEEP
                  LOAD [$(PKField)],  Timestamp(max(ImportDate),'$(TimestampFormat)') as ImportDate, Timestamp(max(LastUpdate),'$(TimestampFormat)') as LastUpdate
                  resident NextFile  
                  group by [$(PKField)];  
                  
                  DROP TABLE filter;
             else
					[NextFile]:
                    LOAD *, '$(File)' as ImportFileName, Now() as ImportDate
                    FROM $(File) 
                    (txt, utf8, embedded labels, delimiter is ',', msq);
                   Concatenate
                   Load * from $(QVDDestination)\$(QVDName).qvd (qvd);
			 end if

                
		end if 

        STORE NextFile INTO $(QVDDestination)\$(QVDName).qvd (qvd);
        DROP TABLE NextFile;
        execute cmd.exe /C move /Y "$(File)" "$(FileDestination)";

    NEXT File;
    
end sub


//============================================================
// Subroutine to Generate Calendar. 
//============================================================
SUB CalendarFromField(_field, _calendar, _prefix)

    [$(_calendar)]:
      // Generate Final Calendar
      LOAD
          [$(_field)]
          ,year([$(_field)]) as [$(_prefix)Year]
          ,month([$(_field)]) as [$(_prefix)Month]
          ,day([$(_field)]) as [$(_prefix)Day]
          ,weekday([$(_field)]) as [$(_prefix)Weekday]
      ;
      // Generate range of dates between min and max.
      LOAD
          date(DateMin + IterNo()) as [$(_field)]		// Link Field
      WHILE DateMin + IterNo() <= DateMax	
      ;
      // Find min and max of date field values.
      LOAD
          min(datefield)-1 as DateMin
          ,max(datefield) as DateMax
      ;
      // Load date field values.
      LOAD 
          FieldValue('$(_field)', RecNo()) as datefield
      AutoGenerate FieldValueCount('$(_field)');	

END SUB

//============================================================
// Subroutine to Generate Date Formats
//============================================================

SUB CreateDervidedCalanderTypes

	if vDo_DervidedCalanderTypes = 1 and len(vDateFieldList) > 0 THEN
        [autoCalendar]: 
        DECLARE FIELD DEFINITION Tagged ('$date')
        FIELDS
              Dual(Year($1), YearStart($1)) AS [Year] Tagged ('$axis', '$year'),
              Dual('Q'&Num(Ceil(Num(Month($1))/3)),Num(Ceil(NUM(Month($1))/3),00)) AS [Quarter] Tagged ('$quarter', '$cyclic'),
              Dual(Year($1)&'-Q'&Num(Ceil(Num(Month($1))/3)),QuarterStart($1)) AS [YearQuarter] Tagged ('$yearquarter', '$qualified'),
              Dual('Q'&Num(Ceil(Num(Month($1))/3)),QuarterStart($1)) AS [_YearQuarter] Tagged ('$yearquarter', '$hidden', '$simplified'),
              Month($1) AS [Month] Tagged ('$month', '$cyclic'),
              Dual(Year($1)&'-'&Month($1), monthstart($1)) AS [YearMonth] Tagged ('$axis', '$yearmonth', '$qualified'),
              Dual(Month($1), monthstart($1)) AS [_YearMonth] Tagged ('$axis', '$yearmonth', '$simplified', '$hidden'),
              Dual('W'&Num(Week($1),00), Num(Week($1),00)) AS [Week] Tagged ('$weeknumber', '$cyclic'),
              Date(Floor($1)) AS [Date] Tagged ('$axis', '$date', '$qualified'),
              Date(Floor($1), 'D') AS [_Date] Tagged ('$axis', '$date', '$hidden', '$simplified');

        DERIVE FIELDS FROM FIELDS $(vDateFieldList) USING [autoCalendar] ;
        //DERIVE FIELDS FROM EXPLICIT TAGS '$date' USING autoCalendar;
        //DERIVE FIELDS FROM IMPLICIT TAG USING autoCalendar;
    END IF

END SUB


//==============================================================================
//Subroutine to split field names in transform tables into facts and dimensions
//==============================================================================

//All fields to go into the fact table do not require a prefix but any dimension table fields do (Dim_)
//2.Transform - Build separate lists of all fields prefixed with either Fact or Dim 

SUB FactTable (vTable)
	TRACE 'Get Fact Field List';
	LET vFactFieldList =;

	LET vFields = NoOfFields('$(vTable)'); 

    For a=1 to $(vFields)
    	LET vField = FieldName($(a),'$(vTable)');
    	If left('$(vField)',4)<>'Dim_' THEN
    		LET vFactFieldList = '$(vFactFieldList)' & ', ' & '[$(vField)]';  
    	End If;
    Next 
    LET vFactFieldList = Mid('$(vFactFieldList)',2);

END Sub


SUB DimTable (vTable)
	
    Trace 'Get Dim Field List';
    LET vDimFieldList =;

    LET vFields = NoOfFields('$(vTable)'); 
    For a=1 to $(vFields)
        LET vField = FieldName($(a),'$(vTable)');
        If left('$(vField)',4)='Dim_' THEN
            LET vDimFieldList = '$(vDimFieldList)' & ', ' & '[$(vField)]';  
        End If; 
    Next 
    LET vDimFieldList = Mid('$(vDimFieldList)',2);

END Sub


//3.Load - Load each list as a table and drop the prefixes.
Sub LoadTableAsDim(vTable) //, vFactFieldList, vDimFieldList)
    TRACE 'Load Fact Field List';
    
	$(vTable):
    LOAD   *
    FROM 
            [$(vBaseLib)\QVD_Transform\$(vTable).qvd] 
            (qvd);
            
   //Load fields into a list of facts and dims
   	Call FactTable ('$(vTable)');
    Call DimTable ('$(vTable)');
    
    drop table $(vTable);
    
    Fact_$(vTable):
    LOAD $(vFactFieldList) 
    FROM 
            [$(vBaseLib)\QVD_Transform\$(vTable).qvd] 
            (qvd);

    SET vFactFieldList=;

    Concatenate(Facts)
    Load *
    Resident Fact_$(vTable);

    Drop Table  Fact_$(vTable);

    TRACE 'Load Dim Field List';
    Dim_$(vTable):
    LOAD   [$(vTable) ID],
           $(vDimFieldList) 
    FROM 
            [$(vBaseLib)\QVD_Transform\$(vTable).qvd] 
            (qvd);

    SET vDimFieldList=;

    For f = 1 to NoOfFields('Dim_$(vTable)')
        let vFieldOld = FieldName($(f),'Dim_$(vTable)');
        let vFieldNew = Replace('$(vFieldOld)','Dim_','');
        IF  left('$(vFieldOld)',4) = 'Dim_' Then;
        RENAME FIELD '$(vFieldOld)' to '$(vFieldNew)';
        End if
    Next f;   

END Sub




sub CreateLinkTable

    // This code should produce a link table which links all tables to 
    // EVERY other table according to the FK (foreign keys) which are
    // set up in the table itself.    This code uses these FK fields to
    // build the link table and then drops the fields from the original 
    // tables leaving only the measures or attributes of the dimensions
    //
    // The link table will contain one record for each table which contains
    // a foreign key.

    // A future development would be to autonumber the keys automatically
    // Bearing in mind that source data may be loaded from QVD's I think this
    // needs to be a separate bit of code which takes all keys in the file and
    // Autonumbers them in all tables.

    // THIS SCRIPT REQUIRES SOME KEY FIELDS TO BE IN CERTAIN FORMATS 
    // IN THE DATA FILES

    /////////////////////////////////////////////////
    // DIMENSION TABLES
    /////////////////////////////////////////////////

    // DIMENSIONS are MASTER FILE TABLES
    // They must have a UNIQUE PRIMARY KEY
    // The primary key must be named in the format: PK_<TableName>
    // where <TableName> is the name of the table (exactly!)

    /////////////////////////////////////////////////
    //  Create Transaction (FACT) tables
    /////////////////////////////////////////////////

    //  Transaction Tables contain data which can be related to other tables
    //  A single record in a Transaction table can relate to only one record
    //  in each Master table

    //  Each Transaction Table must have a UNIQUE PRIMARY KEY
    //  The primary key must be named PK_<TableName>

    //  Each Transaction table can be related to as many other tables as required
    //  by creating a Foreign key field which matches the Primary Key of the related table
    //  Foreign Keys MUST be named:  FK_<TableName>   (where table name is the name of the related table)


    // Step 1:  Find all Foreign Keys
    //          This creates a table t1 which contains 1 record for each Foreign Key
    //          found by searching all tables loaded into the app.
    let vTables = NoOfTables();
    for a = 0 to $(vTables)
        let vTable = TableName($(a));

        for i = 1 to NoOfFields('$(vTable)')
          let vField = FieldName($(i), '$(vTable)');
            if left(vField,2) = 'FK'  THEN
                t1:
                load 
                    '$(vField)' as Field, 
                    '$(vTable)' as Table, 
                    $(a) as TableNo 
                autogenerate 1
                where mixmatch('$(vTable)','t0','t0d','t1') = 0 ;
            end if 

        next i
    next a


    //Step 2:  Build a field (FieldList) to contain all fields in each table  and 
    //         another field (Size)to determine which is longest and therefore contains all fields.
    //         Also create a field (Droplist) to be the list of FK fields in tables other than the link 
    //         Table which will need to be dropped.
    t2:
        load 
            Table, 
            FieldList, 
            DropList, 
            len(FieldList) as Size
        WHERE NOT Table like '*_Calander'
        ;
        load 
           Table, 
           Field,  
           if(peek(Table)=Table, 
              peek(FieldList) &' ' & Field & ' as ' & replace(Field,'FK','PK')& ',',
              Field & ' as ' & replace(Field,'FK','PK')& ',')  as FieldList,
           if(peek(Table)=Table,peek(DropList) &', ' & Field,Field)  as DropList
        resident t1
        WHERE NOT Table like '*_Calander'
        order by Table, Field
        ;

    // 
    //Qualify *;
    //LK:
    //NOCONCATENATE
    //LOAD * RESIDENT t1;
    //Unqualify *; 

    drop table t1;


    // Step 3:  Create a script line to load all link table records for each table
    //          Based on the longest field for each table from above

    t3:
    noconcatenate
    load
    'LOAD ' & replace(Script,', RESIDENT',' RESIDENT') as Script,
    DropScript
    ;
    load 
     chr(39) & Table & chr(39) & ' as LinkSource,' & 'PK_' & Table & ', ' &firstvalue(FieldList) & ' RESIDENT ' & Table & ';' as Script,
     'DROP FIELD '& firstvalue(DropList) & ' FROM ' & Table & ';' as DropScript
    resident t2
    group by Table
    order by Size desc
    ;

    drop table t2;


    //Step 4:  Create the link table by the "Script" lines to create the link table records
    //         and the then the "DropScript" to remove the FK_Fields from the tables.

    LinkTable:
    LOAD * INLINE [
        LinkSource
        StartRecord 
    ];


    for j = 1 to fieldvaluecount('Script')

        //  Create link table records for table
        LET vScript = fieldvalue('Script',$(j));

        LinkTable$(j):
        CONCATENATE
        $(vScript)

        //  Drop FK_Fields from table
        LET vDropScript = fieldvalue('DropScript',$(j));

        $(vDropScript)

    next j

    drop table t3;

end sub

sub DuplicateKeyCheck

      // This is unrelated code which helps to identify duplicated keys
      // Duplicated primary keys can lead to incorrect results especially
      // when using a link table approach. 

      // Step 0:  Check all Primary Keys are unique
      let vTables = NoOfTables();
      for a = 0 to $(vTables)
          let vTable = TableName($(a));
          let vPK = 'PK_'& '$(vTable)';
          if match('$(vTable)','TablesWithDuplicateKeys','LinkTable','LK') = 0 then

                  // Find table with duplicated keys
                  TablesWithDuplicateKeys:
                  load
                  *,
                  KeyTotalCount -KeyDistinctCount as NoOfDuplicatedKeys
                  ;
                  load
                  '$(vTable)' as TableWithDuplicateKey,
                  '$(vPK)' as KeyWithDuplicates, 
                  count(Distinct $(vPK)) as KeyDistinctCount,
                  count($(vPK)) as KeyTotalCount
                  resident '$(vTable)'
                  //where '$(vTable)' <> 't0'  // replaced by if as this did not work for some reason
                  group by '$(vPK)','$(vTable)' 
                  ;

                  // Identify the keys which are duplicated in the suspect tables     

                  LET vDupTable = 'Dup_' & '$(vTable)';


                  // Temp table to count number of instances of keys
                  $(vDupTable):
                  LOAD
                  '$(vTable)' as t0d.Table,
                  $(vPK) as t0d.PK,
                  count($(vPK)) as t0d.PKCount
                  RESIDENT '$(vTable)' 
                  GROUP BY '$(vTable)', $(vPK)
                  ;

                  // Actual keys which are duplicated
                  DuplicatedKeys:
                  LOAD
                  t0d.Table as TableWithDuplicateKey,
                  '$(vPK)' as DuplicatedKey,
                 t0d.PK as DuplicatedKeyValue,
                  t0d.PKCount as DuplicatedKeyCount
                  RESIDENT $(vDupTable)
                  WHERE t0d.PKCount > 1;
                  DROP TABLE $(vDupTable);       

           end if
      next a
end sub


sub CreateDocumentFields


    let vTables = NoOfTables();

    DocName:
    LOAD 
    DocumentName() as Document
    AUTOGENERATE 1;
    LET vDocumentName = peek('Document');
    DROP TABLE DocName;


    for a = 0 to $(vTables)
        let vTable = TableName($(a));

        for i = 1 to NoOfFields('$(vTable)')
            let vField = FieldName($(i), '$(vTable)');
                      DocumentFields:
                  load 
                    '$(vDocumentName)' as _Document, 
                    '$(vField)' as _Field, 
                    '$(vTable)' as _Table
                  autogenerate 1
                  ;
        next i
    next a

    STORE DocumentFields INTO ..\DataDict\Fields_$(vDocumentName).qvd;
    DROP TABLE DocumentFields;


end sub

SUB CreateCalendar
//
// Build Common Calendar
//

       
    LET vLastDayOfFiscalYear = Date('01/' & if(len($(vStartMonth))=1,'0','') & $(vStartMonth) & '/' & year(AddYears(Today(),If(Month(today()) >= $(vStartMonth),1,0)))) - 1;
       
    // Master Mapping Table - Edit here and the actual mapping tables will pull the changes through
    
    FiscalQuaterMap: 					
	LOAD * INLINE [ 
    	Month, Q, FiscalMonth
        1, Q4, 10
        2, Q4, 11
        3, Q4, 12
        4, Q1, 1
        5, Q1, 2
        6, Q1, 3
        7, Q2, 4
        8, Q2, 5
        9, Q2, 6
        10, Q3, 7
        11, Q3, 8
        12, Q3, 9
    ];   

    QuartersMap:
    MAPPING LOAD 
    	[Month], [Q]
    Resident FiscalQuaterMap;
    
    CalFiscalSort: 
    MAPPING LOAD 
    	[Month], [FiscalMonth]
    Resident FiscalQuaterMap;
    
    DROP TABLE FiscalQuaterMap;

     TRACE  >>>>>> Building Calendar ...;

     CalTemp:
     LOAD
         Min(PK_CALENDAR) as MinDate,
         Max(PK_CALENDAR) as MaxDate
     RESIDENT LinkTable
    ;

    LET vMaxDate = peek('MaxDate');
    LET vMinDate = peek('MinDate');
    LET vRowsToCreate = num('$(vMaxDate)'-'$(vMinDate)')+1;
	LET varToday = Num(today());   

     CALENDAR:
     LOAD
         CalDate 																as PK_CALENDAR,
         CalDate																as [Date Num],//[Cal Num]
         date(CalDate, '$(DateFormat)')											as [Date],//[Cal Date]
         Year(CalDate) 															as [Year],//[Cal Year]
         //mid(YearName(CalDate,0,4),1,5)&mid(YearName(CalDate,0,4),8,2) 		as Year_Fiscal,
         QuarterName(CalDate) 													as [Quarter Year],//[Cal Quarter Year]
         left(QuarterName(CalDate),7) 											as [Quarter],//[Cal Quarter]
         Month(CalDate) 														as [Month],//[Cal Month]
         Month(CalDate) & ' ' & year(CalDate) 									as [MonthYear],//[Cal MonthYear]
		 year(CalDate) & ' ' &  Month(CalDate) 									as [YearMonth],//[Cal MonthYear]
		 Week(CalDate) 															as [Week],//[Cal Week]
         WeekStart(CalDate) 													as [W/C],//[Cal W/C]
         WeekEnd(CalDate) 														as [W/E],//[Cal W/E]
         day(CalDate) 															as [Day],//[Cal Day]
 		 pick(weekday(CalDate)+1,'Sun','Mon','Tue','Wed','Thu','Fri','Sat')	 	as [DayOfWeek],//[Cal DayOfWeek]
/*
		YearToDate([CalDate], 0,  $(vFiscalStartMonth), 
        		date(($(vLastDayOfFiscalYear)), 'DD/MM/YYYYY'))  *-1			as [Cal Fiscal CurYTD],
        YearToDate([CalDate], -1, $(vFiscalStartMonth), 
        		date(($(vLastDayOfFiscalYear)), 'DD/MM/YYYYY'))  *-1			as [Cal Fiscal LastYTD],
         
         ApplyMap('QuartersMap', month(CalDate), Null()) 						as [Cal Fiscal Quarter],
         'FY' & right(yearname (CalDate, 0, $(vFiscalStartMonth)),2) 			as [Cal Fiscal Year],        
		 'FY' & right(yearname (CalDate, 0, $(vFiscalStartMonth)),2) 
         	& '-' & ApplyMap('QuartersMap', month(CalDate), Null()) 			as [Cal Fiscal YearQuarter],
            
         ApplyMap('CalFiscalSort',month(CalDate), Null())						as [Cal Fiscal Sort],
*/         
         If([CalDate] <= MonthStart(Today())-1 
         	And [CalDate] >= AddMonths(MonthStart(Today())-1, -12)+1, 
            1, 0) 																as [Cal Rolling12 CurYTD],  
         If([CalDate] <= AddMonths(MonthStart(Today())-1, -12) 
         	And [CalDate] >= AddMonths(MonthStart(Today())-1, -24)+1, 
            1, 0)  																as [Cal Rolling12 LastYTD],  
      
         ;
    LOAD
         $(vMinDate)+recno()-1 as [CalDate]
    AUTOGENERATE ($(vRowsToCreate));

    DROP TABLE CalTemp;

    
END SUB

//
//  Sub:  CloseUp
//
SUB CloseUp
    //
    // Create Link Table
    //
    IF upper(vDo_LinkTable) = 1 THEN
       //CALL LogTime('Creating Link Table');
        call CreateLinkTable
    END IF

    //
    // Check for duplicate keys
    // //
    IF upper(vDo_LinkTable) = 1 AND upper(vDo_DuplicateKey) = 1 THEN
        //CALL LogTime('Checking for duplicate keys');
        call DuplicateKeyCheck
    END IF

	//Create month/ year / monthyear / and other periods...  
    IF upper(vDo_DervidedCalanderTypes) = 1  THEN
        //CALL LogTime('Creating Document Field List');
        call CreateDervidedCalanderTypes
    END IF

	//
    // Create Calendar
    //
    IF upper(vDo_LinkTable) = 1 AND upper(vDo_Calendar) = 1  THEN
        //CALL LogTime('Creating calendar');
        call CreateCalendar
    END IF

    //
    // Build Dcoument Field List
    //
    IF upper(vDo_CreateDcoumentFields) = 1  THEN
        //CALL LogTime('Creating Document Field List');
        call CreateDocumentFields
    END IF

END SUB



///$tab -----------

///$tab MAPPING
        MAP_SUBSIDIARY:
        MAPPING LOAD
            f1,
            f2
        FROM [lib://Raw/Mappings.xlsx]
        (ooxml, embedded labels, table is subsidiarynohierarchy);
        
        MAP_DEPARTMENT:
        MAPPING LOAD
            f1,
            f2
        FROM [lib://Raw/Mappings.xlsx]
        (ooxml, embedded labels, table is department);
        
        MAP_CLASS:
        MAPPING LOAD
            f1,
            f2
        FROM [lib://Raw/Mappings.xlsx]
        (ooxml, embedded labels, table is class);
        
        MAP_ACCOUNT:
        MAPPING LOAD
            f1,
            f2
        FROM [lib://Raw/Mappings.xlsx]
        (ooxml, embedded labels, table is account);
///$tab Load Tables
//LET vTable = 'NETSUITE_GL';   		$(vTable):	LOAD * FROM [lib://QVD\Transform\$(vTable)TempPreConsol.QVD] (qvd);


LET vTable = 'NETSUITE_GL';   		$(vTable):	LOAD * FROM [lib://QVD\Load\$(vTable).QVD] (qvd);
Concatenate $(vTable):	LOAD * FROM [lib://QVD\Load\FINANCIAL_BUDGET.QVD] (qvd);

LET vTable = 'PL_HEADERS';  		$(vTable):	LOAD 
    IF(WILDMATCH("NetSuite P&L Line",'Intercompany Recharges*')>0,'Intercompany Recharges',"NetSuite P&L Line") AS "NetSuite P&L Line",
    //"NetSuite P&L Line",
    IF(WILDMATCH("PL_HEADERS Budget PL Header",'Intercompany Recharges*')>0,'Intercompany Recharges',"PL_HEADERS Budget PL Header") AS "PL_HEADERS Budget PL Header",
    //"PL_HEADERS Budget PL Header",
    "PL_HEADERS Budget PL Header Order",
    Format,
    Format2 
FROM [lib://QVD\Load\$(vTable).QVD] (qvd)
	WHERE WILDMATCH([PL_HEADERS Budget PL Header],'*%*') = 0;
    
 
LET vTable = 'BS_HEADERS';			$(vTable):	LOAD * FROM [lib://QVD\Load\$(vTable).QVD] (qvd);
LET vTable = 'MonthLoop';			$(vTable):	LOAD * FROM [lib://QVD\Load\$(vTable).QVD] (qvd);

NOCONCATENATE

NETSUITE_GL2:
LOAD
    PK_NETSUITE_GL,
    "NetSuite GL Account Num",
    APPLYMAP('MAP_DEPARTMENT',"NetSuite Business Line",NULL()) AS "NetSuite Business Line",
    "NetSuite Period Sort",
    FK_BS_HEADER,
    "NetSuite LTM Flag",
    FK_CALENDAR,
    "NetSuite Count",
    "NetSuite Account Group",
    //"NetSuite P&L Line",
    IF(WILDMATCH("NetSuite P&L Line",'Intercompany Recharges*')>0,'Intercompany Recharges',"NetSuite P&L Line") AS "NetSuite P&L Line",
    "NetSuite BS Line",
    "NetSuite Financial Statement",
    //"NetSuite FX Rate",
    "NetSuite ID",
    "NetSuite Trans Date",
    Yearmonth,
    "NetSuite Posting Period",
    "NetSuite Posting YYYY-MM",
    "NetSuite BS_Consol_Sort",
    "NetSuite BS_Consol_Year",
    "NetSuite BS_Consol_Month",
    "NetSuite Posting Date",
    "NetSuite Travel Date",
    APPLYMAP('MAP_SUBSIDIARY',"NetSuite Subsidiary",NULL()) AS "NetSuite Subsidiary",
    "NetSuite Posting Type",
    'INV0'&AUTONUMBER("NetSuite Doc No") AS "NetSuite Doc No",
    "NetSuite Account Type",
    //LEFT("NetSuite Temp Account",5) AS "NetSuite Account Number", use NetSuite GL Account Num
    PURGECHAR("NetSuite Account",'TPGIW') aS "NetSuite Account",
    APPLYMAP('MAP_CLASS',"NetSuite Service Type",NULL()) AS "NetSuite Service Type",
    'XXX XXXXXXX XXXXXXX' AS "NetSuite Memo",
    "NetSuite Subsid Amount (Orig) (Temp)",
    "NetSuite Subsid Currency",
    //"NetSuite Trans Amount",
    "NetSuite Trans Currency",
    //"NetSuite Debit Amount",
    //"NetSuite Credit Amount",
    //"NetSuite Debit Fx Amount",
    //"NetSuite Credit Fx Amount",
    "NetSuite Consol Method",
    //"NetSuite FX Join Field",
    //"Test Counter",
    SK_FINANCIAL_BUDGET,
    XX_FINANCIAL_BUDGET,
    //"GL Entries Test",
    "NetSuite Budget Account",   
    "NetSuite Posting YYYY-MM Key",
    "Financial Budget EUR 000s"*2.1			AS "Financial Budget EUR 000s", // random
    "Financial Budget EUR"*2.1				AS "Financial Budget EUR", // random
    "NetSuite Subsid Amount (Orig)"*2.1		AS "NetSuite Subsid Amount (Orig)",
    "NetSuite Subsid Amount (EUR)"*2.1		AS "NetSuite Subsid Amount (EUR)"
    ,
    //"Budget Test",
    "Financial Budget Count",
    "Financial Budget PL Line",
    APPLYMAP('MAP_SUBSIDIARY',"Financial Budget Company",NULL()) AS "Financial Budget Company",
    "Financial Budget Month",
    "Financial Budget Period",
    APPLYMAP('MAP_DEPARTMENT',"Financial Budget Business Line",NULL()) AS "Financial Budget Business Line",

    "Financial Budget Year-Month",
    "PL Header"
RESIDENT NETSUITE_GL;

DROP TABLE NETSUITE_GL;
RENAME TABLE NETSUITE_GL2 TO NETSUITE_GL;
///$tab Close UP
	CALL CloseUp;

///$tab RENAME FIELDS
RENAME FIELD [PL_HEADERS Budget PL Header]		TO [P&L Header];
RENAME FIELD [NetSuite P&L Line]				TO [PL Account Group];
RENAME FIELD [NetSuite GL Account Num]			TO [GL Account #];
RENAME FIELD [NetSuite Doc No]					TO [Invoice #];

RENAME FIELD [BS_HEADERS BS Header]				TO [BS Header];
RENAME FIELD [NetSuite BS Line]					TO [BS Account Group];

RENAME FIELD [NetSuite Service Type]			TO [Service Type];
RENAME FIELD [NetSuite Business Line]			TO [Business Line];
RENAME FIELD [NetSuite Subsidiary]				TO [Subsidiary];
RENAME FIELD [NetSuite Account Type]			TO [Account Type];
RENAME FIELD [NetSuite Account Group]			TO [Account Group];
RENAME FIELD [NetSuite Posting Type]			TO [Posting Type];
RENAME FIELD [NetSuite Subsid Currency]			TO [Subsid Currency];
RENAME FIELD [NetSuite Trans Currency]			TO [Trans Currency];
RENAME FIELD [NetSuite Financial Statement]		TO [Financial Statement];

DROP FIELD [NetSuite Subsid Amount (Orig) (Temp)];
///$tab DATE VARS
//LET vAsOfDate = 202002;

LET vAsOfNum_1 = 202002;
LET vAsOfNum_2 = 202001;
LET vAsOfNum_3 = 201912;
LET vAsOfNum_4 = 201911;
LET vAsOfNum_5 = 201910;
LET vAsOfNum_6 = 201909;
LET vAsOfNum_7 = 201908;
LET vAsOfNum_8 = 201907;
LET vAsOfNum_9 = 201906;
LET vAsOfNum_10 = 201905;
LET vAsOfNum_11 = 201904;
LET vAsOfNum_12 = 201903;
LET vAsOfNum_13 = 201902;
LET vAsOfNum_14 = 201901;
LET vAsOfNum_15 = 201812;

LET vAsOfNum = $(vAsOfNum_1);

//LET vStartY0			= 'NUM(YEARSTART(vAsOfNum,0,1))'; 				//StartCurYear
//LET vStartY1			= 'NUM(YEARSTART(vAsOfNum,1,1))'; 				//StartNextYear

LET vStartY0			= 'NUM(LEFT(vAsOfNum,4)&01)'; 					//StartCurYear
LET vStartY_1			= 'NUM(LEFT(vAsOfNum,4)-1&01)'; 				//StartNextYear

LET vStartY_1M0			= 'NUM($(vStartY0)-100)'; 	//StartPrevYearCurMonth

LET vAsOfNumY_1 		= 'NUM(vAsOfNum-100)';

LET vYTD_MTD_LTM =1; // 1 for YTD, 2, for MTD, 3 for LTM

LET vStartCY = 'IF(vYTD_MTD_LTM=1,$(vStartY0),vAsOfNum)';
LET vStartPY = 'IF(vYTD_MTD_LTM=1,$(vStartY_1),$(vAsOfNumY_1))';

LET vCY = 'LEFT(vAsOfNum,4)';
LET vPY = 'LEFT($(vStartY_1),4)';
///$tab SEARCH EXCLUDE
SEARCH EXCLUDE
[PL Account Group],
[BS Account Group],
[Format2],
[NetSuite Budget Account],
[Account Group],
[PK_BS_Header],
[XX_FINANCIAL_BUDGET],
[SK_FINANCIAL_BUDGET],
[PK_BS_HEADER];
///$tab ** EXIT SCRIPT **
EXIT SCRIPT;